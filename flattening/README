These programs are used to flatten meshes and manipulate their textures based on that flattening.

decimate.py is a Blender script which loads a mesh and reduces the vertex count. It was written for the Chad Gospels data set and it may not work immediately on other data (it expects a certain file format and mesh orientation).

flatten.py was developed for the same data set. It loads the decimated mesh, creates a collision plane below it, drops the mesh as a cloth, allows it to flatten, and writes the mesh to a new flattened file.

These scripts are useful but may require slight modification for each data set. A more general quick and dirty method to try out flattening is advised for trying flattening on new data sets. This can be done in the Blender GUI:

1. Import the mesh to be flattened.
2. Change Viewport Shading to "Texture" to better see what is going on.
3. Rotate (keyboard: r) the mesh so that if it were dropped on a flat surface, it would produce the desired effect.
4. Grab (keyboard: g) the mesh and move it in the Z direction (press z to restrict movement to this axis) so that its lowest point is above the origin.
5. Add -> Mesh -> Plane.
6. Press n to open additional properties toolbar.
7. Increase X and Y scale so that the plane is larger than the mesh to be flattened.
8. Select mesh.
9. Go to physics settings and enable "Cloth".
10. Change cloth preset to "Silk".
11. Under Cloth Cache, increase the number of frames from 250 to something like 500 or 1000. Also change the end frame count in the general Blender simulation (start and end frame counts usually visible in bottom of window).
12. Select plane.
13. Enable physics for Rigid Body.
14. Change Type to Passive.
15. Return to mesh settings and under Cloth Cache press Bake All Dynamics.
16. When it is finished, go to the final frame. Delete the plane and export the flattened mesh.

redraw is an unfinished program. The idea is to read in an original mesh, a flattened mesh, and the texture image, and then to create a new image. The created image would be the same as the texture image but it would be warped slightly to reflect the surface changes from flattening. This would be a "corrected" image that effectively removes the effects of bent pages. The program is unfinished because it was using OpenGL to rasterize textured triangles and this caused various issues. The maximum texture size on the machine used to develop this is 16K. The texture images in the Chad data set are smaller than this, but they are 3 channel images. Storing them in an OpenGL texture buffer requires effectively 3 times the space that would be required for a single channel image of the same size. Due to this problem, the entire image could not be loaded into one OpenGL texture. This problem could be eliminated by loading only fragments at a time (for example, quadrants). Work on this was started but did not get far due to other projects. If someone were to attempt this again it is recommended that they break down the input image into multiple OpenGL textures, or they use something other than OpenGL that allows for larger images.